resource "aws_autoscaling_group" "asg" {
  count = "${length(var.availability_zones)}"

  depends_on = [
    "aws_cloudwatch_event_target.opentest_creation_hook",
    "aws_cloudwatch_event_target.opentest_terminate_hook"
  ]

  lifecycle {
    create_before_destroy = true
  }

  availability_zones = ["${element(var.availability_zones, count.index)}"]

  name_prefix          = "opentest-${var.environment}-${element(var.availability_zones, count.index)}-"
  max_size             = "1"
  min_size             = "1"
  desired_capacity     = "1"
  force_delete         = true
  launch_configuration = "${aws_launch_configuration.asg-lc.name}"

  vpc_zone_identifier = ["${element(split(",", var.vpc_subnet_private_ids), count.index)}"]

  initial_lifecycle_hook {
    name                   = "${var.environment}-opentest-creation-hook-${element(var.availability_zones, count.index)}"
    default_result         = "CONTINUE"
    heartbeat_timeout      = 60
    lifecycle_transition   = "autoscaling:EC2_INSTANCE_LAUNCHING"
  }

  initial_lifecycle_hook {
    name                   = "${var.environment}-opentest-terminate-hook-${element(var.availability_zones, count.index)}"
    default_result         = "CONTINUE"
    heartbeat_timeout      = 60
    lifecycle_transition   = "autoscaling:EC2_INSTANCE_TERMINATING"
  }

  tag {
    key                 = "Name"
    value               = "opentest-${var.environment}-${element(var.availability_zones, count.index)}"
    propagate_at_launch = "true"
  }

  tag {
    key                 = "Environment"
    value               = "${var.environment}"
    propagate_at_launch = "true"
  }

  tag {
    key                 = "Component"
    value               = "opentest"
    propagate_at_launch = "true"
  }
}

data "template_file" "userdata" {
  template = "${file("${path.module}/userdata.tpl")}"

  vars {
    OPENTEST_ASSETS_BUCKET = "${var.opentest-assets-bucket}"
  }
}

resource "aws_launch_configuration" "asg-lc" {
  lifecycle {
    create_before_destroy = true
  }

  name_prefix          = "opentest-${var.environment}-"
  image_id             = "${data.aws_ami.amazon-linux-2.id}"
  instance_type        = "t2.micro"
  security_groups      = ["${aws_security_group.ec2-sg.id}"]
  user_data            = "${data.template_file.userdata.rendered}"
  iam_instance_profile = "${aws_iam_instance_profile.ec2-profile.name}"
  key_name             = "${aws_key_pair.keypair.key_name}"
}

resource "aws_key_pair" "keypair" {
  key_name_prefix = "opentest-${var.environment}-"
  public_key      = "${var.ssh_public}"
}

resource "aws_security_group" "ec2-sg" {
  name_prefix = "opentest-${var.environment}-ec2-"
  description = "opentest-${var.environment}-ec2 security group"
  vpc_id      = "${var.vpc_id}"

  ingress {
    from_port = 22
    to_port   = 22
    protocol  = "tcp"

    cidr_blocks = ["${var.vpc_cidr}"]
  }

  ingress {
    from_port = "443"
    to_port   = "443"
    protocol  = "tcp"

    cidr_blocks = ["${var.vpc_cidr}"]
  }

  ingress {
    from_port = "389"
    to_port   = "389"
    protocol  = "tcp"

    cidr_blocks = ["${var.vpc_cidr}"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["194.75.24.84/32"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags {
    Name        = "opentest-${var.environment}-ec2"
    Component   = "opentest"
    Environment = "${var.environment}"
  }
}
