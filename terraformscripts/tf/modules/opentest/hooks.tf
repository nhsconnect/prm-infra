resource "aws_iam_role" "opentest_hook" {
  name = "${var.environment}-opentest-hook"

  assume_role_policy = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": "sts:AssumeRole",
            "Principal": {
                "Service": "lambda.amazonaws.com"
            },
            "Effect": "Allow"            
        }
    ]
}
EOF
}

resource "aws_iam_role_policy" "opentest_hook" {
  name = "${var.environment}-opentest-hook"
  role = "${aws_iam_role.opentest_hook.id}"

  policy = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "ec2:DeleteRoute",
                "ec2:CreateRoute",
                "ec2:DescribeInstances",
                "ec2:DescribeRouteTables",
                "ec2:DescribeVpcs",
                "ec2:ModifyInstanceAttribute",
                "autoscaling:CompleteLifecycleAction"
            ],
            "Effect": "Allow",
            "Resource": "*"
        }
    ]
}
EOF
}

resource "aws_iam_role_policy_attachment" "opentest_hook" {
  role       = "${aws_iam_role.opentest_hook.id}"
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
}

locals {
  asg_names = [
    "opentest-${var.environment}-${element(var.availability_zones, 0)}",
    "opentest-${var.environment}-${element(var.availability_zones, 1)}",
    "opentest-${var.environment}-${element(var.availability_zones, 2)}"
  ]

  creation_event_pattern = {
    source      = ["aws.autoscaling"]
    detail-type = ["EC2 Instance-launch Lifecycle Action"]

    detail = {
      AutoScalingGroupName = [
        "${slice(local.asg_names, 0, length(var.availability_zones) - 1)}"
      ]
    }
  }

  creation_event_pattern_json = "${jsonencode(local.creation_event_pattern)}"

  terminate_event_pattern = {
    source      = ["aws.autoscaling"]
    detail-type = ["EC2 Instance-terminate Lifecycle Action"]

    detail = {
      AutoScalingGroupName = [
        "${slice(local.asg_names, 0, length(var.availability_zones) - 1)}"
      ]
    }
  }

  terminate_event_pattern_json = "${jsonencode(local.terminate_event_pattern)}"
}

resource "aws_cloudwatch_event_rule" "opentest_creation_hook" {
  name        = "${var.environment}-opentest-creation-hook"
  description = "Update OpenTest VPN Gateway instance when new instance launched"

  event_pattern = "${local.creation_event_pattern_json}"
}

resource "aws_cloudwatch_event_rule" "opentest_terminate_hook" {
  name        = "${var.environment}-opentest-terminate-hook"
  description = "Update OpenTest VPN Gateway instance when an instance is terminated"

  event_pattern = "${local.terminate_event_pattern_json}"
}
resource "aws_lambda_permission" "opentest_creation_hook" {
  statement_id  = "AllowExecutionFromCloudWatch"
  action        = "lambda:InvokeFunction"
  function_name = "${aws_lambda_function.opentest_creation_hook.function_name}"
  principal     = "events.amazonaws.com"
  source_arn    = "${aws_cloudwatch_event_rule.opentest_creation_hook.arn}"
}

resource "aws_lambda_permission" "opentest_terminate_hook" {
  statement_id  = "AllowExecutionFromCloudWatch"
  action        = "lambda:InvokeFunction"
  function_name = "${aws_lambda_function.opentest_terminate_hook.function_name}"
  principal     = "events.amazonaws.com"
  source_arn    = "${aws_cloudwatch_event_rule.opentest_terminate_hook.arn}"
}

resource "aws_cloudwatch_event_target" "opentest_creation_hook" {
  target_id = "${var.environment}-opentest-creation-hook"
  rule      = "${aws_cloudwatch_event_rule.opentest_creation_hook.name}"
  arn       = "${aws_lambda_function.opentest_creation_hook.arn}"
}

resource "aws_cloudwatch_event_target" "opentest_terminate_hook" {
  target_id = "${var.environment}-opentest-terminate-hook"
  rule      = "${aws_cloudwatch_event_rule.opentest_terminate_hook.name}"
  arn       = "${aws_lambda_function.opentest_terminate_hook.arn}"
}

module "creation_hook" {
  source = "howdio/lambda/aws//modules/package"

  name = "opentest-creation-hook"
  path = "${path.module}/creation_hook.py"
}

module "terminate_hook" {
  source = "howdio/lambda/aws//modules/package"

  name = "opentest-terminate-hook"
  path = "${path.module}/terminate_hook.py"
}

resource "aws_lambda_function" "opentest_creation_hook" {
  filename         = "${module.creation_hook.path}"
  function_name    = "${var.environment}-opentest-creation-hook"
  handler          = "creation_hook.lambda_handler"
  role             = "${aws_iam_role.opentest_hook.arn}"
  description      = "OpenTest VPN Gateway Instance mangler"
  memory_size      = 128
  timeout          = 20
  runtime          = "python3.7"
  source_code_hash = "${module.creation_hook.base64sha256}"

  vpc_config {
    subnet_ids = ["${split(",", var.vpc_subnet_private_ids)}"]
    security_group_ids = ["${aws_security_group.opentest_hook.id}"]
  }

  environment {
    variables {
      ROUTE_CIDR_BLOCKS = "${var.route_cidr_blocks}"
    }
  }

  tags {
    Name          = "${var.environment}-opentest-creation-hook"
    Enviroronment = "${var.environment}"
    Component     = "opentest"
  }
}

resource "aws_lambda_function" "opentest_terminate_hook" {
  filename         = "${module.terminate_hook.path}"
  function_name    = "${var.environment}-opentest-terminate-hook"
  handler          = "terminate_hook.lambda_handler"
  role             = "${aws_iam_role.opentest_hook.arn}"
  description      = "OpenTest VPN Gateway Instance mangler"
  memory_size      = 128
  timeout          = 20
  runtime          = "python3.7"
  source_code_hash = "${module.terminate_hook.base64sha256}"

  vpc_config {
    subnet_ids = ["${split(",", var.vpc_subnet_private_ids)}"]
    security_group_ids = ["${aws_security_group.opentest_hook.id}"]
  }

  environment {
    variables {
      ROUTE_CIDR_BLOCKS = "${var.route_cidr_blocks}"
    }
  }

  tags {
    Name          = "${var.environment}-opentest-creation-hook"
    Enviroronment = "${var.environment}"
    Component     = "opentest"
  }
}

resource "aws_security_group" "opentest_hook" {
  name_prefix = "${var.environment}-opentest-hook"
  description = "${var.environment}-opentest-hook security group"
  vpc_id      = "${var.vpc_id}"

  tags {
    Name        = "${var.environment}-opentest-hook"
    Component   = "opentest"
    Environment = "${var.environment}"
  }

  egress {
    from_port = 0
    to_port   = 0
    protocol  = -1
    cidr_blocks = ["0.0.0.0/0"]
  }
}
