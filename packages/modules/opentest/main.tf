resource "aws_autoscaling_group" "vpn_gw" {
  count = "${length(var.vpc_availability_zones)}"

  availability_zones = ["${element(var.vpc_availability_zones, count.index)}"]

  name_prefix          = "vpn-gw-${var.environment}-${element(var.vpc_availability_zones, count.index)}-"
  max_size             = "1"
  min_size             = "0"
  desired_capacity     = "0"
  force_delete         = true
  launch_configuration = "${aws_launch_configuration.vpn_gw.name}"

  vpc_zone_identifier = ["${element(var.vpc_private_subnet_ids, count.index)}"]

  tag {
    key                 = "Name"
    value               = "vpn-gw-${var.environment}-${element(var.vpc_availability_zones, count.index)}"
    propagate_at_launch = "true"
  }

  tag {
    key                 = "Environment"
    value               = "prm-${var.environment}"
    propagate_at_launch = "true"
  }

  tag {
    key                 = "Component"
    value               = "vpn-gw"
    propagate_at_launch = "true"
  }

  depends_on = ["aws_lambda_function.vpn_gw_creation_hook", "aws_lambda_function.vpn_gw_terminate_hook"]
}

data "template_file" "vpn_gw_userdata" {
  template = "${file("${path.module}/userdata.tpl")}"

  vars {
    OPENTEST_ASSETS_BUCKET = "${var.opentest_assets_bucket}"
  }
}

data "aws_ami" "amazon_linux_2" {
  most_recent = true

  filter {
    name   = "owner-alias"
    values = ["amazon"]
  }

  filter {
    name   = "name"
    values = ["amzn2-ami-hvm*"]
  }
}

resource "aws_launch_configuration" "vpn_gw" {
  lifecycle {
    create_before_destroy = true
  }

  name_prefix          = "opentest-vpn-gw-${var.environment}-"
  image_id             = "${data.aws_ami.amazon_linux_2.id}"
  instance_type        = "t2.micro"
  security_groups      = ["${aws_security_group.vpn_gw_sg.id}"]
  user_data            = "${data.template_file.vpn_gw_userdata.rendered}"
  iam_instance_profile = "${aws_iam_instance_profile.vpn_gw.name}"
  key_name             = "${var.ssh_key_name}"
}

resource "aws_iam_instance_profile" "vpn_gw" {
  name = "vpn-gw-${var.environment}"

  role = "${aws_iam_role.vpn_gw.name}"
}

data "aws_iam_policy_document" "ec2_assume" {
  statement {
    effect  = "Allow"
    actions = ["sts:AssumeRole"]

    principals {
      type        = "Service"
      identifiers = ["ec2.amazonaws.com"]
    }
  }
}

resource "aws_iam_role" "vpn_gw" {
  name               = "vpn-gw-${var.environment}"
  assume_role_policy = "${data.aws_iam_policy_document.ec2_assume.json}"
}

data "aws_iam_policy_document" "vpn_gw" {
  statement {
    effect = "Allow"

    actions = [
      "s3:GetObject",
      "s3:GetObjectVersion",
    ]

    resources = [
      "arn:aws:s3::::${var.opentest_assets_bucket}/*",
    ]
  }
}

resource "aws_iam_role_policy" "vpn_gw" {
  role   = "${aws_iam_role.vpn_gw.id}"
  policy = "${data.aws_iam_policy_document.vpn_gw.json}"
}

resource "aws_security_group" "vpn_gw_sg" {
  name_prefix = "vpn-gw-${var.environment}-"
  description = "vpn-gw-${var.environment} security group"
  vpc_id      = "${var.vpc_id}"

  ingress {
    from_port = 22
    to_port   = 22
    protocol  = "tcp"

    cidr_blocks = ["${var.vpc_cidr}"]
  }

  ingress {
    from_port = "443"
    to_port   = "443"
    protocol  = "tcp"

    cidr_blocks = ["${var.vpc_cidr}"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags {
    Name        = "vpn-gw-${var.environment}"
    Component   = "vpn-gw"
    Environment = "prm-${var.environment}"
  }
}
