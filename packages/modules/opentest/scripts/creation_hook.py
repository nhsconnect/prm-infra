import boto3
import os

def lambda_handler(event, context):
    session = boto3.session.Session()
    ec2_resource = session.resource('ec2')
    ec2_client = session.client('ec2')

    instanceId = event["detail"]["EC2InstanceId"]

    # Ensure the source/dest check attribute is False to enable instance to route traffic
    context.log("Setting source/dest check to False for instance " + instanceId + "\n")

    ec2_client.modify_instance_attribute(
        SourceDestCheck={
            'Value': False
        },
        InstanceId=instanceId
    )

    context.log("Completed setting source/dest check to False for instance " + instanceId + "\n")

    context.log("Determining route table for instance " + instanceId + "\n")

    instance = ec2_resource.Instance(instanceId)

    vpc = ec2_resource.Vpc(instance.vpc_id)

    our_route_table = None
    for route_table in vpc.route_tables.all():
        for route_table_association in route_table.associations:
            if route_table_association.subnet_id == instance.subnet_id:
                our_route_table = route_table
                break

    context.log("Route table for instance " + instanceId + " is " + our_route_table.id + "\n")

    route_cidr_blocks = os.environ["ROUTE_CIDR_BLOCKS"].split(",")

    for route_cidr_block in route_cidr_blocks:
        route = ec2_resource.Route(our_route_table.id, route_cidr_block)
        if route is not None:
            try:
                route.delete()
            except:
                context.log('Route ' + route_cidr_block + ' already deleted')
        our_route_table.create_route(
            DestinationCidrBlock=route_cidr_block,
            InstanceId=instanceId
        )

    # Allow provisioning to continue...
    context.log("Completing autoscaling lifecycle action for instance " + instanceId + "\n")

    autoscaling = session.client('autoscaling')

    autoscaling.complete_lifecycle_action(
        LifecycleHookName=event["detail"]["LifecycleHookName"],
        AutoScalingGroupName=event["detail"]["AutoScalingGroupName"],
        LifecycleActionToken=event["detail"]["LifecycleActionToken"],
        LifecycleActionResult="CONTINUE",
        InstanceId=instanceId
    )

    context.log("Completed autoscaling lifecycle action for instance " + instanceId + "\n")

    return "Success"