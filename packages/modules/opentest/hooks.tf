resource "aws_autoscaling_lifecycle_hook" "vpn_gw_creation_hook" {
  count = "${length(var.vpc_availability_zones)}"

  name                   = "vpn-gw-creation-hook-${var.environment}-${element(var.vpc_availability_zones, count.index)}"
  autoscaling_group_name = "${element(aws_autoscaling_group.vpn_gw.*.name, count.index)}"
  default_result         = "CONTINUE"
  heartbeat_timeout      = 60
  lifecycle_transition   = "autoscaling:EC2_INSTANCE_LAUNCHING"
}

resource "aws_autoscaling_lifecycle_hook" "vpn_gw_terminate_hook" {
  count = "${length(var.vpc_availability_zones)}"

  name                   = "vpn-gw-terminate-hook-${var.environment}-${element(var.vpc_availability_zones, count.index)}"
  autoscaling_group_name = "${element(aws_autoscaling_group.vpn_gw.*.name, count.index)}"
  default_result         = "CONTINUE"
  heartbeat_timeout      = 60
  lifecycle_transition   = "autoscaling:EC2_INSTANCE_TERMINATING"
}

data "aws_iam_policy_document" "lambda_assume" {
    statement {
        effect = "Allow"
        actions = ["sts:AssumeRole"]
        principals {
            type = "Service"
            identifiers = ["lambda.amazonaws.com"]
        }        
    }
}

resource "aws_iam_role" "vpn_gw_hook" {
  name = "vpn-gw-hook-${var.environment}"

  assume_role_policy = "${data.aws_iam_policy_document.lambda_assume.json}"
}

data "aws_iam_policy_document" "vpn_gw_hook" {
  statement {
    effect = "Allow"
    actions = [
      "ec2:DeleteRoute",
      "ec2:CreateRoute",
      "ec2:DescribeInstances",
      "ec2:DescribeRouteTables",
      "ec2:DescribeVpcs",
      "ec2:ModifyInstanceAttribute",
      "autoscaling:CompleteLifecycleAction"
    ]
    resources = ["*"]
  }
}

resource "aws_iam_role_policy" "vpn_gw_hook" {
  name = "vpn-gw-hook-${var.environment}"
  role = "${aws_iam_role.vpn_gw_hook.id}"

  policy = "${data.aws_iam_policy_document.vpn_gw_hook.json}"
}

resource "aws_iam_role_policy_attachment" "vpn_gw_hook" {
  role       = "${aws_iam_role.vpn_gw_hook.id}"
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
}

locals {
  creation_event_pattern = {
    source      = ["aws.autoscaling"]
    detail-type = ["EC2 Instance-launch Lifecycle Action"]

    detail = {
      AutoScalingGroupName = ["${aws_autoscaling_group.vpn_gw.*.name}"]
    }
  }

  creation_event_pattern_json = "${jsonencode(local.creation_event_pattern)}"

  terminate_event_pattern = {
    source      = ["aws.autoscaling"]
    detail-type = ["EC2 Instance-terminate Lifecycle Action"]

    detail = {
      AutoScalingGroupName = ["${aws_autoscaling_group.vpn_gw.*.name}"]
    }
  }

  terminate_event_pattern_json = "${jsonencode(local.terminate_event_pattern)}"
}

resource "aws_cloudwatch_event_rule" "vpn_gw_creation_hook" {
  name        = "vpn-gw-creation-hook-${var.environment}"
  description = "Update OpenTest VPN Gateway instance when new instance launched"

  event_pattern = "${local.creation_event_pattern_json}"
}

resource "aws_cloudwatch_event_rule" "vpn_gw_terminate_hook" {
  name        = "vpn-gw-terminate-hook-${var.environment}"
  description = "Update OpenTest VPN Gateway instance when an instance is terminated"

  event_pattern = "${local.terminate_event_pattern_json}"
}
resource "aws_lambda_permission" "vpn_gw_creation_hook" {
  statement_id  = "AllowExecutionFromCloudWatch"
  action        = "lambda:InvokeFunction"
  function_name = "${aws_lambda_function.vpn_gw_creation_hook.function_name}"
  principal     = "events.amazonaws.com"
  source_arn    = "${aws_cloudwatch_event_rule.vpn_gw_creation_hook.arn}"
}

resource "aws_lambda_permission" "vpn_gw_terminate_hook" {
  statement_id  = "AllowExecutionFromCloudWatch"
  action        = "lambda:InvokeFunction"
  function_name = "${aws_lambda_function.vpn_gw_terminate_hook.function_name}"
  principal     = "events.amazonaws.com"
  source_arn    = "${aws_cloudwatch_event_rule.vpn_gw_terminate_hook.arn}"
}

resource "aws_cloudwatch_event_target" "vpn_gw_creation_hook" {
  target_id = "vpn-gw-creation-hook-${var.environment}"
  rule      = "${aws_cloudwatch_event_rule.vpn_gw_creation_hook.name}"
  arn       = "${aws_lambda_function.vpn_gw_creation_hook.arn}"
}

resource "aws_cloudwatch_event_target" "vpn_gw_terminate_hook" {
  target_id = "vpn-gw-terminate-hook-${var.environment}"
  rule      = "${aws_cloudwatch_event_rule.vpn_gw_terminate_hook.name}"
  arn       = "${aws_lambda_function.vpn_gw_terminate_hook.arn}"
}

module "creation_hook" {
  source = "howdio/lambda/aws//modules/package"

  name = "vpn-gw-creation-hook"
  path = "${path.module}/scripts/creation_hook.py"
}

module "terminate_hook" {
  source = "howdio/lambda/aws//modules/package"

  name = "vpn-gw-terminate-hook"
  path = "${path.module}/scripts/terminate_hook.py"
}

resource "aws_lambda_function" "vpn_gw_creation_hook" {
  filename         = "${module.creation_hook.path}"
  function_name    = "vpn-gw-creation-hook-${var.environment}"
  handler          = "creation_hook.lambda_handler"
  role             = "${aws_iam_role.vpn_gw_hook.arn}"
  description      = "OpenTest VPN Gateway Instance mangler"
  memory_size      = 128
  timeout          = 20
  runtime          = "python3.7"
  source_code_hash = "${module.creation_hook.base64sha256}"

  vpc_config {
    subnet_ids = ["${var.vpc_private_subnet_ids}"]
    security_group_ids = ["${aws_security_group.vpn_gw_hook.id}"]
  }

  environment {
    variables {
      ROUTE_CIDR_BLOCKS = "192.168.128.0/24"
    }
  }

  tags {
    Name          = "vpn-gw-creation-hook-${var.environment}"
    Enviroronment = "prm-${var.environment}"
    Component     = "vpn-gw"
  }
}

resource "aws_lambda_function" "vpn_gw_terminate_hook" {
  filename         = "${module.terminate_hook.path}"
  function_name    = "vpn-gw-terminate-hook-${var.environment}"
  handler          = "terminate_hook.lambda_handler"
  role             = "${aws_iam_role.vpn_gw_hook.arn}"
  description      = "OpenTest VPN Gateway Instance mangler"
  memory_size      = 128
  timeout          = 20
  runtime          = "python3.7"
  source_code_hash = "${module.terminate_hook.base64sha256}"

  vpc_config {
    subnet_ids = ["${var.vpc_private_subnet_ids}"]
    security_group_ids = ["${aws_security_group.vpn_gw_hook.id}"]
  }

  environment {
    variables {
      ROUTE_CIDR_BLOCKS = "192.168.128.0/24"
    }
  }

  tags {
    Name          = "vpn-gw-terminate-hook-${var.environment}"
    Enviroronment = "prm-${var.environment}"
    Component     = "vpn-gw"
  }
}

resource "aws_security_group" "vpn_gw_hook" {
  name_prefix = "vpn-gw-hook-${var.environment}"
  description = "vpn-gw-hook-${var.environment} security group"
  vpc_id      = "${var.vpc_id}"

  tags {
    Name        = "vpn-gw-hook-${var.environment}"
    Component   = "vpn-gw"
    Environment = "prm-${var.environment}"
  }

  egress {
    from_port = 0
    to_port   = 0
    protocol  = -1
    cidr_blocks = ["0.0.0.0/0"]
  }
}
